%_____________________________________________________________________%  
%  Comparative Analysis of Data-Driven Predictive Control Strategies
% 2023 9th International Conference on Control, Instrumentation, 
%                             and Automation.
%                              December 2023
%                    Sohrab (Ali) Rezaei, Ali Khaki-Sedigh
%               Data-Enabled Predictive Control (DeePC)
%                   Software Generated by Sohrab Rezaei
% 
%    This software documentation accompanies the paper and is freely 
%                                                   available for use.
%    Please keep this information for proper attribution and 
%                                                 to provide feedback.
%                           Email: arezaei2@jhu.edu
%_____________________________________________________________________% 

%% Clear workspace, command window, and close all figures
clear; clc; close all;
% Set the random number generator to its default state.
% Note: Due to the use of random input data, the results of the simulation may vary with each run.
% To ensure consistent results across runs, uncomment the line below to set the random seed:
rng('default');

%% Flag to determine whether to use the previous alpha values
ALPHA_PREVIOUS = true;

%% Optimization options
options = mskoptimset('OptimalityTolerance', 1e-9, ...
    'MaxIterations', 20000, ...
    'ConstraintTolerance', 1e-9);

%% Define the system dynamics function
global uu
sys = @func_sys;

%% Initialize time array for storing computation times
u_Time = [];

%% Setup
% Define system dimensions
n = 2;  % No. system states
m = 1;  % No. input
l = 1;  % No. output
T_s = 0.1;  % Sampling time
C = [1, 0];  % Output matrix
% Data parameters
T = 20 / T_s;
% Predictive Control parameters
Tini = 3;
N = 5;  % Prediction horizon 
M_step = 1;  % Number of consecutive applications of optimal input (multi-step)
Tf = 40 / T_s;  % Closed-loop horizon (simulation length)
y_T = 0.3;

% Define weighting matrices
Q = 1 * eye(l);
R = 0.1 * eye(m);
S = 3 * eye(l);
scale = 100;
Q = Q * scale;
R = R * scale;
S = S * scale;
lambda_g = 50;
lambda_sigma = 1e7;

%% Data Generation
% Define initial conditions and parameters for system disturbance
x0 = [-0; 0];
tau = Tf * 1.25;
TTF = 10 / T_s;
s1 = 20 * pi / 180 * ones(1, TTF);
s2 = -10 * pi / 180 * ones(1, TTF);
s3 = 10 * pi / 180 * ones(1, TTF);
s4 = -20 * pi / 180 * ones(1, TTF + N + 1);
r = [s1 s2 s3 s4];
u_test(1, :) = 3.5 * (2 * (rand(T, 1)) - 1);
x_test = zeros(n, N + 1);
y_test = zeros(l, N);
for i = 1:T
    uu = u_test(:, i);
    t = i * T_s;
    [~, x] = ode45(sys, [t t + T_s], x_test(:, i));
    x_test(:, i + 1) = x(end, :);
    y_test(:, i) = C * x_test(:, i);
end

% Memory initialization
u_mem = u_test;
y_mem = y_test;
x_mem = x_test;
u_mem = [u_mem zeros(l, Tini)];
y_mem = [y_mem zeros(l, Tini)];
x_mem = [x_mem zeros(n, Tini)];
cost_mem = [];

%% Set up DeePC
% Define constraints and bounds
a1 = 3.5;  % Bound on u_bar
a2 = 70 * pi / 180;  % Bound on y_bar
a3 = a1 * 0.99;  % Bound on us
a4 = 70 * pi / 180 * 0.99;  % Bound on ys
u_min = -a1;
u_max = a1;
us_min = -a2;
us_max = a2;

% Optimization variable: x = [u_bar, y_bar, u_s, y_s, g, sigma, beta]
% Cost Functoin: J=1/2*x'*H*x
H=zeros(m*(N+Tini+1)+l*(2*(N+Tini)+1)+T-Tini-N+1);
l_g=T-Tini-N+1;
l_sigma=l*Tini;
for i=1:l_g
    if i <= N
        H(m*(i-1)+1:m*i,m*(i-1)+1:m*i)=R;
        H(m*(i-1)+1:m*i,N*(m+l)+1)=-R;
        H(N*(m+l)+1,m*(i-1)+1:m*i)=-R;
        H(N*(m+l)+1,N*(m+l)+1)=N*R;
        H(N*m+i,N*m+i)=Q;
        H(N*m+i,N*(m+l)+m+1)=-Q;
        H(N*(m+l)+m+1,N*m+i)=-Q;
        H(N*(m+l)+m+1,N*(m+l)+m+1)=N*(Q+S);
        H(N*(m+l)+m+l+l_g+l_sigma+i,N*(m+l)+m+l+l_g+l_sigma+i)=S;
        H(N*(m+l)+m+l+l_g+l_sigma+i,N*(m+l)+m+1)=-S;
        H(N*(m+l)+m+1,N*(m+l)+m+l+l_g+l_sigma+i)=-S;
    end
    H(N*(m+l)+m+l+i,N*(m+l)+m+l+i)=lambda_g;
    if i <= l_sigma
        H(N*(m+l)+m+l+l_g+i,N*(m+l)+m+l+l_g+i)=lambda_sigma;
    end
end
aa1=[zeros(Tini,N);-eye(N)];
aa2=[-eye(Tini,Tini);zeros((N),Tini)];
aa3=[ones(1,N),zeros(1,T-2*N-Tini+1)];
A3=[zeros(1,(N+1)*(m+l)),aa3,zeros(1,l_sigma+l*N+Tini*(m+l))];
A4=[zeros(Tini,(N+1)*(m+l)+l_g+l_sigma+l*N),eye(Tini),zeros(Tini,Tini*l)];
A5=[zeros(Tini,(N+1)*(m+l)+l_g+l_sigma+l*N+m*Tini),eye(Tini)];
A6=[zeros(N,(N+1)*(m+l)+l_g+l_sigma),eye(N),zeros(N,(m+l)*Tini)];
A7=[zeros(Tini,N-Tini),eye(Tini),zeros(Tini,l*N),-ones(Tini,m),zeros(Tini,l+l_g+l_sigma+l*N+Tini*(m+l))];
A8=[zeros(Tini,m*N),zeros(Tini,N-Tini),eye(Tini),zeros(Tini,m),-ones(Tini,m),zeros(Tini,l_g+l_sigma+l*N+Tini*(m+l))];
B12=zeros((m+l)*(N+Tini),1);
B3=1;
B78=zeros((m+l)*(Tini),1);
A_ineq = [];
b_ineq = [];
% Constraints
lower=[-a1*ones(m*N,1);-a2*ones(l*N,1);-a3*ones(m,1);-a4*ones(l,1);-inf*ones(l_g+l_sigma+l*N+(m+l)*Tini,1)];
upper=[a1*ones(m*N,1);a2*ones(l*N,1);a3*ones(m,1);a4*ones(l,1);inf*ones(l_g+l_sigma+l*N+(m+l)*Tini,1)];

% Initializations
f = zeros(size(H, 1), 1)';
H_u = Hankel_p(u_mem(:, end - T + 1:end), N + Tini);
H_y = Hankel_p(y_mem(:, end - T + 1:end), N + Tini);

%% DeePC iterations
for i = 1:M_step:Tf
    % Extract initial conditions from memory
    u_ini = u_mem(:, end - Tini + 1:end);
    y_ini = y_mem(:, end - Tini + 1:end);

    % Desired output
    rd = r(:, i + 1:i + N);
    % Cost function related Matrices
    A1=[aa1,zeros(N+Tini,l*(N+1)+m),H_u,zeros(N+Tini,l*N+l_sigma),aa2,zeros(N+Tini,l*Tini)];
    A2=[zeros(N+Tini,m*N),aa1,zeros(N+Tini,l+m),H_y,-eye(N+Tini,l_sigma),zeros(N+Tini,l*N),zeros(N+Tini,m*Tini),aa2];
    B4=reshape(u_ini,[],1);
    B5=reshape(y_ini,[],1);
    B6=reshape(rd,[],1);
    A_eq=[A1;A2;A3;A4;A5;A6;A7;A8];
    B_eq=[B12;B3;B4;B5;B6;B78];

    % Solve optimization problem
    tic
    [sol, fval, exitflag, output, lambda] = quadprog(H, f, A_ineq, b_ineq, A_eq, B_eq, lower, upper, [], options);
    u_s = sol(1:m * M_step);
    TT_u = toc;
    u_Time = [u_Time TT_u];

    % Simulate system output
    x_1 = zeros(n, M_step + 1);
    x_1(:, 1) = x_mem(:, end);
    y_1 = zeros(l, M_step);
    for k = 1:M_step
        uu = u_s(:, k);
        t = k * T_s;
        [~, x] = ode23t(sys, [t t + T_s], x_1(:, k));
        x_1(:, k + 1) = x(end, :);
        y_1(:, k) = C * x_1(:, k);
    end

    % Update memory
    u_mem = [u_mem u_s];
    y_mem = [y_mem y_1];
    x_mem = [x_mem x_1];
    cost_mem = [cost_mem fval];

    % Display current iteration information
    disp("Sample Time is  :  " + num2str(i))
    disp("System output is:  " + num2str(y_mem(:, end)))
    disp("System input is :  " + num2str(u_s(:, end)))
end
avg_time=sum(u_Time)/numel(u_Time);
disp(avg_time)
save Deepc.mat
y_mem=y_mem*180/pi;
r=r*180/pi;
%% plotting results
time=0:T_s:3*(Tf+T+4)*T_s;
time=time(1:numel(y_mem));
time2=T*T_s:T_s:(Tf+T+4)*T_s;
w1=2.2;        % width 1 -- first line
w2=1.5;     % width 2 -- second line
w3=1.5;     % width 3 -- box line width
xx0=0;      % figuer location 
yy0=0;        % figuer location 
width=850;  % image width -- convert cm to pixel 
height=750;   % image height -- convert cm to pixel
t_it="\itt";
xleb="\its";
figure 
subplot(3,1,1)
    for i=1:l
        plot(time,y_mem(i,:),'r','LineWidth',w1);
        hold on;
        stairs(time2,r(:,1:numel(time2)),'b:','LineWidth',w2); 
        xlabel("\fontname{Times New Roman}\bf\fontsize{10}Time (" + ...
        xleb+"\rm\fontname{Times New Roman}\bf\fontsize{10})",'FontWeight','bold')
          ylabel( {'\fontname{Times New Roman}\bf\fontsize{9}DeePC'...
             ;'Output and Reference Signals'})
        legend("y("+t_it+"\rm)","r("+t_it+"\rm)",'Location','best')
        grid off
        box on
    end
    xlim([0 time(end)])

subplot(3,1,2)
    for i=1:m
        plot(time,u_mem(i,:),'r','LineWidth',w2); 
        xlabel("\fontname{Times New Roman}\bf\fontsize{10}Time (" + ...
        xleb+"\rm\fontname{Times New Roman}\bf\fontsize{10})",'FontWeight','bold')
         ylabel( {'\fontname{Times New Roman}\bf\fontsize{10}DeePC'...
             ;'Control Signal'})
    end
    xlim([0 time(end)])
    
subplot(3,1,3)
    plot(time2(1:length(cost_mem)),cost_mem,'r','LineWidth',w2); 
    xlabel("\fontname{Times New Roman}\bf\fontsize{10}Time (" + ...
    xleb+"\rm\fontname{Times New Roman}\bf\fontsize{10})",'FontWeight','bold')
     ylabel( {'\fontname{Times New Roman}\bf\fontsize{10}DeePC'...
         ;'Cost Function'})
    xlim([0,time2(length(cost_mem))])



%%  functions
function H=Hankel_p(u,L)
    % u should be in the form of [u1 u2 ... uT]
    T=size(u,2);
    m=size(u,1);
    H=zeros(L*m,T-L+1);
    for i=1:L
        H((i-1)*m+1:i*m,:)=u(:,i:T-L+i);
    end
end


function f = func_sys(t,x)
    global uu
    r=0.2;
    m=1;
    g=9.81;
    k=0.4;
    f=[x(2)
        -g/r*sin(x(1))-k/(m*r)*x(2)+uu/(m*r)];


end