%_____________________________________________________________________%  
%  Comparative Analysis of Data-Driven Predictive Control Strategies
% 9th International Conference on Control, Instrumentation, and Automation,
%                              December 2023
%                    Ali Rezaei, Ali Khaki-Sedigh
%              Model-Free Adaptive Predictive Control (MFAPC)
%                   Software Generated by Ali Rezaei
% 
%    This software documentation accompanies the paper and is freely 
%                                                   available for use.
%    Please keep this information for proper attribution and 
%                                                 to provide feedback.
%                           Email: A.rezaei2@email.kntu.ac.ir
%_____________________________________________________________________%
%% -------- Initialization ------------------------------------------------
% Clear workspace, close all figures, and command window
close all; clear; clc;
global uu

%% -------- Defining Time ---------------------------------------------------
T_s = 0.1;                 % Sampling time
N = 5;                     % Prediction horizon
t_t = 0:40/T_s; 
Tf = numel(t_t); 
time = t_t * T_s;
u_Time = [];

%% -------- MFAPC Setups ---------------------------------------------------
np = 4; % np is the fixed model order (hierarchical forecasting method)
theta = zeros(np, Tf);
k_s = max(np+1, 5);       % Start point of simulation
lambda = 0.37; 
ro = 1; 
mu = 1; 
eta = 1; 
sigma = 0.5; % (0,1]
eps = 1e-5;               % Resetting constant for SISO

% Defining phi
phi = zeros(1, Tf); 
phi_Ly1 = 0.1 ; 

for i = 1:k_s
    phi(:, i) = phi_Ly1;
    theta(:, i) = 0.7/np * ones(np, 1);
end 

A1_hat = zeros(N);
M = 2;
E = ones(N, 1);
g_t = [1; zeros(N-1, 1)]';

%% -------- System Initialization -----------------------------------------
n = 2; % True plant states
C = [1, 0];
x1 = zeros(n, Tf);

for i = 1:k_s
    x1(:, i) = 0;
end

y = zeros(1, Tf - k_s);
y0 = x1(1) * ones(1, k_s);
y = [y0 y]; 
e = zeros(1, Tf);

%% -------- Y Desired -----------------------------------------------------
TTF = 10 / T_s;
s1 = 20 * pi / 180 * ones(1, TTF);
s0 = s1(1:k_s - 1);
s2 = -10 * pi / 180 * ones(1, TTF);
s3 = 10 * pi / 180 * ones(1, TTF);
s4 = -20 * pi / 180 * ones(1, TTF + N + 1);
yd = [s0 s1 s2 s3 s4];

%% -------- Controller Initialization ---------------------------------------
u = zeros(1, Tf + k_s + 1);  % Memory for controller signal
u_lim = 3.5;

%% -------- Real-time Simulation  ------------------------------------------
for t = k_s:Tf
    uu = u(t-1);    
    % -------- System Simulation ----------------------------------------------
    i = t * T_s; 
    [td, x] = ode23t(@func_sys, [i i + T_s], x1(:, t-1)); x1(:, t) = x(end, :); 
    y(:, t) = C * x1(:, t);
    
    % -------- PPJM/ PJM/ PG/ PPD ---------------------------------------------
    tic % Start timer
    d_yt = y(t) - y(t-1); % delta_y(t)
    utc = u(t-1); 
    utc0 = u(t-2);
    d_uc = (utc - utc0); % delta_u from t-2 --> t-1
    dU = d_uc'; % delta_u for CFDL; (t-1)  
    
    % Updating phi
    phi(:, t) = phi(:, t-1) + eta * dU * (d_yt - (phi(:, t-1)') * dU) / (mu + (norm(dU))^2);
    
    % Resetting the phi (if necessary) 
    ndH = norm(dU); 
    nphi = norm(phi(:, t));
    
    if nphi < eps || ndH < eps || ~isequal(sign(phi(1, t)), sign(phi(1, 1)))
        phi(:, t) = phi(:, 1);
    end
    
    % Predictor vector (theta)
    phi_hist = phi(:, t-1:-1:t-np)';
    theta(:, t) = theta(:, t-1) + (phi_hist / (sigma + (norm(phi_hist)^2))) * ...
        (phi(:, t) - phi_hist.' * theta(:, t-1));
    
    if norm(theta(:, t)) >= M
        theta(:, t) = theta(:, 1);
    end

    % Prediction of phi
    for i = 1:N
        phi(:, t+i) = theta(:, t).' * phi(:, t+i-1:-1:t+i-np).';
        
        if ~isequal(sign(phi(:, t+i)), sign(phi(:, 1))) || norm(phi(:, t+i)) < eps
            phi(:, t+i) = phi(:, 1);
        end
    end
    
    for i = 1:N
        A1_hat(i, :) = [phi(:, t:t+i-1), zeros(1, N-i)];
    end
    
    % -------- Control Signal  ----------------------------------------------
    Y_s = yd(t+1:t+N).';
    dUn = (A1_hat.' * A1_hat + lambda * eye(size(A1_hat, 1)))^(-1) * A1_hat.' * (Y_s - E * y(t));
    u(t) = u(t-1) + g_t * dUn;
    
    % Limiting the control signal
    if abs(u(t)) > u_lim
        u(t) = sign(u(t)) * u_lim;
    end
    
    TT_u = toc; % Stop timer
    u_Time = [u_Time TT_u];
end

avg_time=sum(u_Time)/numel(u_Time);
disp("Average each step run time (s): "+num2str(avg_time))
y=y(k_s-1:end); 
yd=yd(k_s-1:Tf); 
u=u(k_s-1:Tf); 
e=e(k_s-1:Tf);
y=y*180/pi;
yd=yd*180/pi;
%% -------- plotting -----------------------------------------------------
m=1;n=1;
Lu=1;
leb='sec';
time2=(0:1000/T_s+N)*T_s; 

    figure
        plot(time(1:length(y)),y,'-r','LineWidth',1.5);hold on;
        plot(time(1:length(yd)),yd,'-.b','LineWidth',1);
        legend('System','Desired','Location','best'); grid;
        xlabel(leb); ylabel('System output'); xlim([0 time(end)])    
    figure
        plot(time(1:end-k_s+2),u,'-r','LineWidth',1.5); grid;
        xlabel(leb); ylabel('System input'); xlim([0 time(end)]);
figure 
    column=m*(Lu); row=m; count=1;
    for j=1:m
        for i=1:n*Lu
            phi_plot=phi(i,:);
            subplot(row,column,count); plot(time2(1:length(phi_plot)),phi_plot,'LineWidth',1.25)
            ylabel('\phi'); grid; xlabel(leb); xlim([0 time(end)]);
            count=count+1;
        end     
    end


 
%% Functions

function f = func_sys(t,x)
    global uu
    r=0.2;
    m=1;
    g=9.81;
    k=0.4;
    f=[x(2)
        -g/r*sin(x(1))-k/(m*r)*x(2)+uu/(m*r)];
end
