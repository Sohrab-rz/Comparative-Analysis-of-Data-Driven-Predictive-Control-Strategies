%_____________________________________________________________________%  
%  Comparative Analysis of Data-Driven Predictive Control Strategies
% 9th International Conference on Control, Instrumentation, and Automation,
%                              December 2023
%                    Ali Rezaei, Ali Khaki-Sedigh
%               Willems Koopman Predictive Control (WKPC)
%                   Software Generated by Ali Rezaei
% 
%    This software documentation accompanies the paper and is freely 
%                                                   available for use.
%    Please keep this information for proper attribution and 
%                                                 to provide feedback.
%                           Email: A.rezaei2@email.kntu.ac.ir
%_____________________________________________________________________% 

%% Clear workspace, command window, and close all figures
clc; clear; close all;
% Set the random number generator to its default state.
% Note: Due to the use of random input data, the results of the simulation may vary with each run.
% To ensure consistent results across runs, uncomment the line below to set the random seed:
% rng('default');
%% Optimization options
options = mskoptimset('OptimalityTolerance', 1e-9,...
    'MaxIterations', 20000,...
    'ConstraintTolerance', 1e-9);
%% Define the system dynamics function
global uu
sys = @func_sys;
%% Initialize time array for storing computation times
u_Time=[];
%% Setup
% Defining system dimensions
n = 2;  % No. system states
m = 1;  % No. input
l = 1;  % No. output
T_s = 0.1;
C=[1,0];
%%  Parameters
N = 5; % Prediction Horizon: Number of future steps considered in the predictive control
M_step = 1; % Number of consecutive applications of optimal input (multi-step)
Tf = 40/T_s; % "Closed-loop horizon" (simulation length)
Tini =  2; % Initialization time, should be greater than the system lag
T = 20/T_s; % Total simulation time

Q=1*eye(l); % Weighting factor for the system output
R=0.1*eye(m); % Weighting factor for the system input
lambda_g=0.1; % Regularization factor for the optimization problem

s=1; % Length of the inputs applied to the system
P=10; % Number of eigenfunctions used in the predictive control
n_eig_fcn=P+n; % Total number of eigenfunctions considered in the model

%% Data Generation 
% Define initial conditions and parameters for system disturbance
TTF = 10 / T_s;
s1 = 20 * pi / 180 * ones(1, TTF);
s2 = -10 * pi / 180 * ones(1, TTF);
s3 = 10 * pi / 180 * ones(1, TTF);
s4 = -20 * pi / 180 * ones(1, TTF + N + 1);
r = [s1 s2 s3 s4];
u_test(1, :) = 3.5 * (2 * (rand(T, 1)) - 1);
x_test=zeros(n,T+1);
y_test=zeros(l,T);
z_test=zeros(P+n,T);
for i=1:T
    uu = u_test(:,i);
    t = i*T_s;
    [~,x] = ode45(sys,[t t+T_s],x_test(:,i));
    x_test(:,i+1) = x(end,:);
    y_test(:,i) = C*x_test(:,i);
    z_test(:,i) = rbf_fcn(x_test(:,i),P);
end
% Memory initialization
u_mem=u_test;
y_mem=y_test;
x_mem=x_test;
z_mem=z_test;
z_k=z_mem(:,end);
cost_mem=[];
%% Set up WKPC
% Define constraints and bounds
a1=3.5; % bound on u_bar
a2=170*pi/180; % bound on y_bar
a3=a1*0.99; % bound on us 
% optimization variable: x=[u_bar,y_bar,u_s,y_s,g,sigma,y_d,u_ini,y_ini]'
% Cost Functoin: J=1/2*x'*H*x
l_g=T-Tini-N+1;
H=zeros((N+Tini)*(m+l)+m+l_g+l*N+(Tini)*(n_eig_fcn));
for i = 1:l_g
    if i <=N
        H(m*(i-1)+1:m*i,m*(i-1)+1:m*i)=R;
        H(m*(i-1)+1:m*i,N*(m+l)+1)=-R;
        H(N*(m+l)+1,m*(i-1)+1:m*i)=-R;
        H(N*(m+l)+1,N*(m+l)+1)=N*R;
        H(N*m+i,N*m+i)=Q;
        H(N*m+i,N*(m+l)+m+l_g+i)=-Q;
        H(N*(m+l)+m+l_g+i,N*m+i)=-Q;
        H(N*(m+l)+m+l_g+i,N*(m+l)+m+l_g+i)=Q;
    end
    H(N*(m+l)+m+i,N*(m+l)+m+i)=lambda_g;    
end
aa1=-eye(n_eig_fcn*Tini);
aa3=-[zeros(m*Tini,m*N);eye(m*N)];
aa4=-[eye(m*Tini);zeros(m*N,m*Tini)];
aa5=-[zeros(l*Tini,m*N);eye(l*N)];
aa6=-[eye(l*Tini);zeros(l*N,m*Tini)];
A4=[zeros(m*Tini,N*(m+l)+m+l_g+N*l),eye(m*Tini),zeros(m*Tini,l*Tini+n_eig_fcn*(Tini))];
A5=[zeros(l*Tini,N*(m+l)+m+l_g+N*l+m*Tini),eye(l*Tini),zeros(l*Tini,n_eig_fcn*(Tini))];
A6=[zeros(l*N,N*(m+l)+m+l_g),eye(l*N),zeros(l*N,(m+l)*Tini+n_eig_fcn*(Tini))];
A7=[zeros(n_eig_fcn*Tini,N*(m+l)+m+l_g+N*l+(l+m)*Tini),eye(n_eig_fcn*Tini)];
A8=[zeros(m,N*(m+l)),eye(m),zeros(m,n_eig_fcn*(Tini)+l_g+N*l+(m+l)*Tini)];
B1=zeros(n_eig_fcn*(Tini),1);
B2=zeros(m*(N+Tini),1);
B3=zeros(l*(N+Tini),1);
B8=zeros(m,1);
A_ineq = [];
b_ineq = [];
% Constraints
lower=[-a1*ones(m*N,1);-a2*ones(l*N,1);-a3*ones(m,1);-inf*ones(l_g+l*N+(m+l)*Tini+n_eig_fcn*(Tini),1)];
upper=[a1*ones(m*N,1);a2*ones(l*N,1);a3*ones(m,1);inf*ones(l_g+l*N+(m+l)*Tini+n_eig_fcn*(Tini),1)];
f=zeros(size(H,1),1);
%% simulation 
u_mem=[u_mem zeros(m,Tini)];
y_mem=[y_mem zeros(l,Tini)];
x_mem=[x_mem zeros(n,Tini)];
H_u = Hankel_p(u_mem(:,end-T+1:end),N+Tini);
H_y = Hankel_p(y_mem(:,end-T+1:end),N+Tini);
for i=1:s:Tf
    % Extract initial conditions from memory
    u_ini=u_mem(:,end-Tini+1:end);
    y_ini=y_mem(:,end-Tini+1:end);
    z_ini=z_mem(:,end-Tini+1:end);
    % Desired output
    rd = r(:,i+1:i+N);
    % Hankel matrices
    H_z = Hankel_p(z_mem(:,end-T+1:end-N),Tini);
    % Cost function related Matrices
    A1=[zeros(n_eig_fcn*(Tini),(N*(m+l)+m)),H_z,zeros(n_eig_fcn*(Tini),N*l+(m+l)*Tini),aa1];
    A2=[aa3,zeros(m*(Tini+N),N*l+m),H_u,zeros(m*(Tini+N),N*l),aa4,zeros(m*(Tini+N),Tini*(l+n_eig_fcn))];
    A3=[zeros(l*(Tini+N),N*m),aa5,zeros(l*(Tini+N),m),H_y,zeros(l*(Tini+N),N*l+m*Tini),aa6,zeros(l*(Tini+N),n_eig_fcn*(Tini))];
    A_eq=[A1;A2;A3;A4;A5;A6;A7];
    B4=reshape(u_ini,[],1);
    B5=reshape(y_ini,[],1);
    B6=reshape(rd,[],1);
    B7=reshape(z_ini,[],1);
    B_eq=[B1;B2;B3;B4;B5;B6;B7];
    % Solve optimization problem
    tic
    [sol,fval,exitflag,output,lambda] = quadprog(H,f,A_ineq,b_ineq,A_eq,B_eq,lower,upper,[],options);
    u_s = sol(1:m*M_step);
    TT_u=toc;
    u_Time=[u_Time TT_u];

    % Simulate system output
    x_1=zeros(n,s+1);
    if i>0
        x_1(:,1)=x_mem(:,end);
    end
    y_1=zeros(l,s);
    z_k=zeros(n_eig_fcn,s+1);
    z_k(:,1)=rbf_fcn(x_1(:,1),P);
    for k = 1:s
        uu = u_s(:,k);
        t = k*T_s;
        [~,x] = ode23t(sys,[t t+T_s],x_1(:,k));
        x_1(:,k+1) = x(end,:);
        y_1(:,k) = C*x_1(:,k);
        z_k(:,k+1) = rbf_fcn(x_1(:,k+1),P);
    end
    % Update memory
    u_mem=[u_mem u_s];
    y_mem=[y_mem y_1];
    x_mem=[x_mem x_1];
    z_mem=[z_mem z_k];
    cost_mem=[cost_mem fval];

    % Display current iteration information
    disp( "Sample Time is:    " + num2str(i) )
    disp( "System output is:  " + num2str(y_1(:,end)) )
    disp( "System input is:   " + num2str(u_s(:,end)) )

end
avg_time=sum(u_Time)/numel(u_Time);
disp(avg_time)
save WKPC.mat
y_mem=y_mem*180/pi;
r=r*180/pi;
%% plotting results
time=0:T_s:(Tf+T+4)*T_s;
time2=T*T_s:T_s:(Tf+T+4)*T_s;
w1=2.2;        % width 1 -- first line
w2=1.5;     % width 2 -- second line
w3=1.5;     % width 3 -- box line width
xx0=0;      % figuer location 
yy0=0;        % figuer location 
width=850;  % image width -- convert cm to pixel 
height=750;   % image height -- convert cm to pixel
t_it="\itt";
xleb="\itsec";
figure 
subplot(3,1,1)
    for i=1:l
        plot(time(1:length(y_mem(i,:))),y_mem(i,:),'r','LineWidth',w1);
        hold on;
        stairs(time2,r(:,1:numel(time2)),'b:','LineWidth',w2); 
        xlabel("\fontname{Times New Roman}\bf\fontsize{10}Time (" + ...
        xleb+"\rm\fontname{Times New Roman}\bf\fontsize{10})",'FontWeight','bold')
          ylabel( {'\fontname{Times New Roman}\bf\fontsize{9}DeePC'...
             ;'Output and Reference Signals'})
        legend("y("+t_it+"\rm)","r("+t_it+"\rm)",'Location','best')
        grid off
        box on
    end
    xlim([0,time2(length(cost_mem))])

subplot(3,1,2)
    for i=1:m
        plot(time(1:length(u_mem(i,:))),u_mem(i,:),'r','LineWidth',w2); 
        xlabel("\fontname{Times New Roman}\bf\fontsize{10}Time (" + ...
        xleb+"\rm\fontname{Times New Roman}\bf\fontsize{10})",'FontWeight','bold')
         ylabel( {'\fontname{Times New Roman}\bf\fontsize{10}DeePC'...
             ;'Control Signal'})
    end
    xlim([0,time2(length(cost_mem))])
    
    subplot(3,1,3)
    plot(time2(1:length(cost_mem)),cost_mem,'r','LineWidth',w2); 
    xlabel("\fontname{Times New Roman}\bf\fontsize{10}Time (" + ...
    xleb+"\rm\fontname{Times New Roman}\bf\fontsize{10})",'FontWeight','bold')
     ylabel( {'\fontname{Times New Roman}\bf\fontsize{10}DeePC'...
         ;'Cost Function'})
    xlim([0,time2(length(cost_mem))])



%% Functions 
function z=rbf_fcn(x,P)
    n=length(x); % number of states
    p=P+n; % number of lifted states
    z=zeros(p,1);
    z(1:n,1)=x;
    c_i=rand(n,1);
    for i=n+1:p
        z(i,1)=(norm(x-c_i))^2 * log10(norm(x-c_i));    
    end
end
function H=Hankel_p(u,L)
    % u should be in the form of [u1 u2 ... uT]
    T=size(u,2);
    m=size(u,1);
    H=zeros(L*m,T-L+1);
    for i=1:L
        H((i-1)*m+1:i*m,:)=u(:,i:T-L+i);
    end
end
   
function f = func_sys(t,x)
    global uu
    r=0.2;
    m=1;
    g=9.81;
    k=0.4;
    f=[x(2)
        -g/r*sin(x(1))-k/(m*r)*x(2)+uu/(m*r)];
end 